################
## Runmax to find the max value of the PV vlues every week'
# install.packages('caTools')
library(caTools)
dmax <- runmax(df_h$S1,7)
plot(runmax(df_h$S1,7), col="red", lwd = 2)
df_h_orig<-df_h
df_h$S1=runmax(df_h$S1,14)
df_h$S2=runmax(df_h$S2,14)
###############
Sh_pw.ts1<- ts(df_h[, c("S1")])
Sh_pw.ts2<- ts(df_h[, c("S2")])
plot(Sh_pw.ts1)
plot(Sh_pw.ts2)
######## Low-Pass Filter ##########
length(Sh_pw.ts1)
y=Sh_pw.ts1
# y=Sh_pw.ts2
x=1:length(y)
length(x)
lowpass.spline <- smooth.spline(x,y, spar = 0.6) ## Control spar for amount of smoothing
yp<-predict(lowpass.spline, x)
yp=data.frame(yp)
yp[yp<0]<- 0
yp$x=df_h_orig$Date
df_h_orig$Date <- as.Date(df_h_orig$DATE, '%m/%d/%Y')
############ X-axis of time series with date instead numerical series
library(ggplot2)
library(lubridate)
####Plots
ggplot(df_h_orig, aes(Date, S1)) + geom_line(color='green') +
geom_line(aes(y=yp$y, col=yp$x), color='red', lwd = 1)+
labs(title="Time Series of PV Solar Power",
subtitle="PW-S1",
y="Solar Power (MW)",
color=NULL)
################ Detrending the hourly time-series ################
######### dividion by clear sky
df_h_det=df_h_orig
df_h_det$S1<-df_h_orig$S1/yp$y
df_h_det$S1[df_h_det$S1>1]<- 1
length(df_h_det$S1)
length(yp$y)
y=df_h_det$S1
x=1:length(y)
length(x)
lowpass.spline <- smooth.spline(x,y, spar = 0.6) ## Control spar for amount of smoothing
ypd<-predict(lowpass.spline, x)
ypd=data.frame(ypd)
ypd[ypd<0]<- 0
ypd[ypd>1]<- 1
ypd$x=df_h_orig$Date
df_h_det$Date <- as.Date(df_h_det$DATE, '%m/%d/%Y')
####Plots
ggplot(df_h_det, aes(Date, S1)) + geom_line(color='green') +
geom_line(aes(y=ypd$y, col=ypd$x), color='red', lwd = 1)+
labs(title="Time Series of Detrended PV Solar Power",
subtitle="PW-S1, detrernding with division by a clear sky model",
caption="",
y="Solar Power (MW)",
color=NULL)
####### substracing clear sky
df_h_det=df_h_orig
df_h_det$S1<-yp$y-df_h_orig$S1
length(df_h_det$S1)
length(yp$y)
y=df_h_det$S1
x=1:length(y)
length(x)
lowpass.spline <- smooth.spline(x,y, spar = 0.6) ## Control spar for amount of smoothing
yps<-predict(lowpass.spline, x)
yps=data.frame(yps)
yps[yps<0]<- 0
yps$x=df_h_orig$Date
df_h_det$Date <- as.Date(df_h_det$DATE, '%m/%d/%Y')
####Plots
ggplot(df_h_det, aes(Date, S1)) + geom_line(color='green') +
geom_line(aes(y=yps$y, col=yps$x), color='red', lwd = 1)+
labs(title="Time Series of Detrended PV Solar Power",
subtitle="PW-S1, detrernding with substracing from Clear sky model",
caption="",
y="Solar Power (MW)",
color=NULL)
############ Boxplots of detrending Pw by division & substracing ###############
library(reshape2)
R=1:length(df_h_orig$S1)
PV_dat<- data.frame(R, df_h_orig$S1, df_h_orig$S1/yp$y, yp$y-df_h_orig$S1)
names(PV_dat) <- c("R", "P_orig", "P_det_div", "P_det_sub")
yy <- melt(PV_dat, id.vars = "R")
ggplot(yy, aes(x = variable, y = value)) +
geom_boxplot()
boxplot(value~variable, data = yy)
summary(PV_dat)
sapply(PV_dat, sd, na.rm = TRUE)
de_sub[de_sub>1]<-1
Sl_pw <- read.csv("../pvinhokkaidodatadistribution/Solar_PV_PW_2yrs.csv", header=T)
Sl_pw<-na.omit(Sl_pw)
##### Normalization
Sl_pw$S1=round(Sl_pw$S1/max(Sl_pw$S1), digits=2)
Sl_pw$S2=round(Sl_pw$S2/max(Sl_pw$S2), digits=2)
dftime<-format(strptime(Sl_pw$TIME,"%H:%M"),'%H:%M')
Sl_pw$TIME<-dftime
# hr="06:00"
hr="07:00"
# hr="10:00"
# hr="11:00"
# hr="11:30"
# hr="12:00"
# hr="14:00"
# hr="17:00"
df_h <- Sl_pw[grep(hr, Sl_pw$TIME), ]
################
## Runmax to find the max value of the PV vlues every week'
# install.packages('caTools')
library(caTools)
dmax <- runmax(df_h$S1,7)
plot(runmax(df_h$S1,7), col="red", lwd = 2)
df_h_orig<-df_h
df_h$S1=runmax(df_h$S1,14)
df_h$S2=runmax(df_h$S2,14)
###############
Sh_pw.ts1<- ts(df_h[, c("S1")])
Sh_pw.ts2<- ts(df_h[, c("S2")])
plot(Sh_pw.ts1)
plot(Sh_pw.ts2)
######## Low-Pass Filter ##########
length(Sh_pw.ts1)
y=Sh_pw.ts1
# y=Sh_pw.ts2
x=1:length(y)
length(x)
lowpass.spline <- smooth.spline(x,y, spar = 0.6) ## Control spar for amount of smoothing
yp<-predict(lowpass.spline, x)
yp=data.frame(yp)
yp[yp<0]<- 0
yp$x=df_h_orig$Date
df_h_orig$Date <- as.Date(df_h_orig$DATE, '%m/%d/%Y')
############ X-axis of time series with date instead numerical series
library(ggplot2)
library(lubridate)
####Plots
ggplot(df_h_orig, aes(Date, S1)) + geom_line(color='green') +
geom_line(aes(y=yp$y, col=yp$x), color='red', lwd = 1)+
labs(title="Time Series of PV Solar Power",
subtitle="PW-S1",
y="Solar Power (MW)",
color=NULL)
################ Detrending the hourly time-series ################
######### dividion by clear sky
df_h_det=df_h_orig
df_h_det$S1<-df_h_orig$S1/yp$y
df_h_det$S1[df_h_det$S1>1]<- 1
length(df_h_det$S1)
length(yp$y)
y=df_h_det$S1
x=1:length(y)
length(x)
lowpass.spline <- smooth.spline(x,y, spar = 0.6) ## Control spar for amount of smoothing
ypd<-predict(lowpass.spline, x)
ypd=data.frame(ypd)
ypd[ypd<0]<- 0
ypd[ypd>1]<- 1
ypd$x=df_h_orig$Date
df_h_det$Date <- as.Date(df_h_det$DATE, '%m/%d/%Y')
####Plots
ggplot(df_h_det, aes(Date, S1)) + geom_line(color='green') +
geom_line(aes(y=ypd$y, col=ypd$x), color='red', lwd = 1)+
labs(title="Time Series of Detrended PV Solar Power",
subtitle="PW-S1, detrernding with division by a clear sky model",
caption="",
y="Solar Power (MW)",
color=NULL)
####### substracing clear sky
df_h_det=df_h_orig
df_h_det$S1<-yp$y-df_h_orig$S1
length(df_h_det$S1)
length(yp$y)
y=df_h_det$S1
x=1:length(y)
length(x)
lowpass.spline <- smooth.spline(x,y, spar = 0.6) ## Control spar for amount of smoothing
yps<-predict(lowpass.spline, x)
yps=data.frame(yps)
yps[yps<0]<- 0
yps$x=df_h_orig$Date
df_h_det$Date <- as.Date(df_h_det$DATE, '%m/%d/%Y')
####Plots
ggplot(df_h_det, aes(Date, S1)) + geom_line(color='green') +
geom_line(aes(y=yps$y, col=yps$x), color='red', lwd = 1)+
labs(title="Time Series of Detrended PV Solar Power",
subtitle="PW-S1, detrernding with substracing from Clear sky model",
caption="",
y="Solar Power (MW)",
color=NULL)
############ Boxplots of detrending Pw by division & substracing ###############
library(reshape2)
de_div=df_h_orig$S1/yp$y
de_div[de_div>1]<- 1
de_sub=yp$y-df_h_orig$S1
de_sub[de_sub>1]<-1
R=1:length(df_h_orig$S1)
PV_dat<- data.frame(R, df_h_orig$S1, de_div, de_sub)
names(PV_dat) <- c("R", "P_orig", "P_det_div", "P_det_sub")
yy <- melt(PV_dat, id.vars = "R")
ggplot(yy, aes(x = variable, y = value)) +
geom_boxplot()
boxplot(value~variable, data = yy)
summary(PV_dat)
sapply(PV_dat, sd, na.rm = TRUE)
hr
#Operational Forecast Data Extraction
#NCEP output is always in GRIB2 format - this makes things easy for us
#An example for the Global Forecast System 0.5 degree model
# install.packages("rNOMADS")
library(rNOMADS)
#Get the latest model url
## Not run:
urls.out <- CrawlModels(abbrev = "gfs_0p50", depth = 1)
#Get a list of forecasts, variables and levels
model.parameters <- ParseModelPage(urls.out[1])
#Figure out which one is the 6 hour forecast
#provided by the latest model run
#(will be the forecast from 6-12 hours from the current date)
my.pred <- model.parameters$pred[grep("06$", model.parameters$pred)]
#What region of the atmosphere to get data for
levels <- c("2 m above ground", "800 mb")
#What data to return
variables <- c("TMP", "RH") #Temperature and relative humidity
#Get the data
model.info <- GribGrab(urls.out[1], my.pred, levels, variables)
odel.data <- ReadGrib(model.info[[1]]$file.name, levels, variables)
model.data <- ReadGrib(model.info[[1]]$file.name, levels, variables)
View(model.info)
View(model.info)
View(model.parameters)
View(model.parameters)
model.parameters[["pred"]]
model.parameters[["variables"]]
model.parameters[["levels"]]
model.parameters[["variables"]]
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
install.packages("aqfig")
install.packages("rgdal")
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# Get the data
grib.info <- ArchiveGribGrab(abbrev, model.date,model.run, pred, file.type = "grib2")
# Read data into R
grib.data <- ReadGrib(grib.info$file.name, levels, variables)
resolution <- c(0.5, 0.5) #Resolution of the model
# Make an array for easier manipulation
atmos <- ModelGrid(grib.data, resolution)
# Set up display
# Plot temperature at 2 m above ground
li <- which(atmos$levels == "2 m above ground")
vi <- which(atmos$variables == "TMP")
colormap <- rev(rainbow(500, start = 0 , end = 5/6))
# Read world boundaries
world <- readOGR(dsn="D:/Data/ne_10m_admin_0_countries", layer="ne_10m_admin_0_countries")
png(file = "world_surface_temp.png", width = 9, height = 6, res=400, type="cairo-png",units="in", bg="white",restoreConsole = TRUE)
image(atmos$x , sort(atmos$y), atmos$z[li,vi,,], col = colormap,
xlab = "Longitude", ylab = "Latitude",
main = paste("World Temperature at Ground Level (deg C):", atmos$fcst.date ,"GMT"))
# Plot coastlines
plot(world, border = "black", add = TRUE, MAPcol = NA)
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# Get the data
grib.info <- ArchiveGribGrab(abbrev, model.date,model.run, pred, file.type = "grib2")
# Read data into R
grib.data <- ReadGrib(grib.info$file.name, levels, variables)
grib.data <- ReadGrib(grib.info$file.name, levels, variables)
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# Get the data
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# Get the data
pred <- 3
# Get the data
grib.info <- ArchiveGribGrab(abbrev, model.date,model.run, pred, file.type = "grib2")
# Read data into R
grib.data <- ReadGrib(grib.info$file.name, levels, variables)
model.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# Get the data
grib.info <- ArchiveGribGrab(abbrev, model.date,model.run, pred, file.type = "grib2")
# R
ArchiveGribGrab
grib.info <- ArchiveGribGrab(abbrev, model.date,model.run, pred, file.type = "grib2")
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
system("wgrib2")
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# Get the data
grib.info <- ArchiveGribGrab(abbrev, model.date,model.run, pred, file.type = "grib2")
# Read data into R
# grib.data <- ReadGrib(grib.info$file.name, levels, variables)
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
system("wgrib2")
# https://jason-doug-climate.blogspot.com/2014/12/mapping-typhoon-haiyanyolanda-with.html
library(rNOMADS)
library(GEOmap)
library(aqfig)
library(rgdal)
levels <- c("surface", "2 m above ground", "10 m above ground", "300 mb")
# Define variables - temperature and wind
variables <- c("TMP", "UGRD", "VGRD")
# Define additional model inputs
abbrev <- "gfsanl"
model.date <- 20141029
model.run <- 06
pred <- 3
# Get the data
grib.info <- ArchiveGribGrab(abbrev, model.date,model.run, pred, file.type = "grib2")
# Read data into R
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
grib.data <- ReadGrib("gfs.t06z.pgrb2full.0p50.f006.grb", levels, variables)
#Operational Forecast Data Extraction
#NCEP output is always in GRIB2 format - this makes things easy for us
#An example for the Global Forecast System 0.5 degree model
# install.packages("rNOMADS")
library(rNOMADS)
#Get the latest model url
## Not run:
urls.out <- CrawlModels(abbrev = "gfs_0p50", depth = 1)
#Get a list of forecasts, variables and levels
model.parameters <- ParseModelPage(urls.out[1])
#Figure out which one is the 6 hour forecast
#provided by the latest model run
#(will be the forecast from 6-12 hours from the current date)
my.pred <- model.parameters$pred[grep("06$", model.parameters$pred)]
#What region of the atmosphere to get data for
levels <- c("2 m above ground", "800 mb")
#What data to return
variables <- c("TMP", "RH") #Temperature and relative humidity
#Get the data
model.info <- GribGrab(urls.out[1], my.pred, levels, variables)
#Operational Forecast Data Extraction
#NCEP output is always in GRIB2 format - this makes things easy for us
#An example for the Global Forecast System 0.5 degree model
# install.packages("rNOMADS")
library(rNOMADS)
#Get the latest model url
## Not run:
urls.out <- CrawlModels(abbrev = "gfs_0p50", depth = 1)
#Get a list of forecasts, variables and levels
model.parameters <- ParseModelPage(urls.out[1])
#Figure out which one is the 6 hour forecast
#provided by the latest model run
#(will be the forecast from 6-12 hours from the current date)
my.pred <- model.parameters$pred[grep("06$", model.parameters$pred)]
#What region of the atmosphere to get data for
levels <- c("2 m above ground", "800 mb")
#What data to return
variables <- c("TMP", "RH") #Temperature and relative humidity
#Get the data
model.info <- GribGrab(urls.out[1], my.pred, levels, variables)
View(model.parameters)
model.parameters[["variables"]]
rls.out[1]
model.parameters[["variables"]]
View(model.info)
model.info[[1]]
filename_Am='gfs.t18z.pgrb2full.0p50.f006.grb'
filename_Am
#Get a list of forecasts, variables and levels
# model.parameters <- ParseModelPage(urls.out[1])
model.parameters <- ParseModelPage(filename_Am)
filename_Am='gfs.t18z.pgrb2full.0p50.f006.grb'
model.parameters <- ParseModelPage(filename_Am)
View(model.parameters)
model.parameters[["pred"]]
model.parameters[["variables"]]
model.parameters[["levels"]]
model.parameters[["variables"]]
model.parameters[["levels"]]
my.pred <- model.parameters$pred[grep("06$", model.parameters$pred)]
#What region of the atmosphere to get data for
levels <- c("2 m above ground", "800 mb")
#What data to return
variables <- c("TMP", "RH") #Temperature and relative humidity
model.info <- GribGrab(filename_Am, my.pred, levels, variables)
filename_Am='gfs.t18z.pgrb2full.0p50.f006.grb'
model.parameters <- ParseModelPage('gfs.t18z.pgrb2full.0p50.f006.grb')
urls.out <- CrawlModels(abbrev = "gfs_0p50", depth = 1)
model.parameters <- ParseModelPage(urls.out[1])
View(model.parameters)
urls.out[1]
levels <- c("2 m above ground", "800 mb")
#What data to return
variables <- c("TMP", "RH") #Temperature and relative humidity
#Get the data
model.data <- ReadGrib('gfs.t18z.pgrb2full.0p50.f006.grb', levels, variables)
model.data <- ReadGrib('gfs.t18z.pgrb2full.0p50.f006.grb', levels, variables)
